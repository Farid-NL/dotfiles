#|----------------------------------
#| zsh4humans settings
#|----------------------------------

# Periodic auto-update on Zsh startup: 'ask' or 'no'.
# You can manually run `z4h update` to update everything.
zstyle ':z4h:' auto-update      'no'

# Ask whether to auto-update this often; has no effect if auto-update is 'no'.
zstyle ':z4h:' auto-update-days '28'

# Keyboard type: 'mac' or 'pc'.
zstyle ':z4h:bindkey' keyboard  'pc'

# Automaticaly wrap TTY with a transparent tmux ('integrated'), or start a
# full-fledged tmux ('system'), or disable features that require tmux ('no').
zstyle ':z4h:' start-tmux       'no'

# Move prompt to the bottom when zsh starts up so that it's always in the same
# position. Has no effect if start-tmux is 'no' or your're not ina tmux session.
zstyle ':z4h:' prompt-at-bottom 'yes'

# Mark up shell's output with semantic information.
zstyle ':z4h:' term-shell-integration 'yes'

# Right-arrow key accepts one character ('partial-accept') from
# command autosuggestions or the whole thing ('accept')?
zstyle ':z4h:autosuggestions' forward-char 'partial-accept'

# Recursively traverse directories when TAB-completing files.
zstyle ':z4h:fzf-complete' recurse-dirs 'yes'

# Accept selection and immediately open fzf once again if the current word isn't fully specified yet.
zstyle ':z4h:fzf-complete'    fzf-bindings tab:repeat
zstyle ':z4h:fzf-dir-history' fzf-bindings tab:repeat
zstyle ':z4h:cd-down'         fzf-bindings tab:repeat

# Enable direnv to automatically source .envrc files.
zstyle ':z4h:direnv'         enable 'no'
# Show "loading" and "unloading" notifications from direnv.
zstyle ':z4h:direnv:success' notify 'yes'

# Enable ('yes') or disable ('no') automatic teleportation of z4h over
# SSH when connecting to these hosts.
#zstyle ':z4h:ssh:example-hostname1'   enable 'yes'
#zstyle ':z4h:ssh:*.example-hostname2' enable 'no'
# The default value if none of the overrides above match the hostname.
zstyle ':z4h:ssh:*'                   enable 'no'

# Send these files over to the remote host when connecting over SSH to the
# enabled hosts.
#zstyle ':z4h:ssh:*' send-extra-files '~/.nanorc' '~/.env.zsh'

#|---------------------------------
#| Clone repositories from GitHub
#|---------------------------------
#z4h install Farid-NL/zsh-nvm || return
z4h install olets/zsh-abbr || return

#|-------------------------------------------------------
#| Install or update core components and initialize Zsh
#|-------------------------------------------------------
#| After this point console I/O is unavailable until Zsh is fully
#| initialized. Everything that requires user interaction or can perform
#| network I/O must be done above. Everything else is best done below.

z4h init || return

#|------------------------
#| Environment variables
#|------------------------

export EDITOR=nvim
export VISUAL=nvim

export GPG_TTY=$TTY

# -i | ignore case in searches that lack uppercase
# -R | display control chars; keep track of screen effects
# -F | exit if entire file fits on first screen
# -M | prompt very verbosely
# -x | set tab stops
export LESS='-iRFMx4'

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_BIN_HOME="$HOME/.local/bin"

export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"
export ANSIBLE_HOME="$XDG_DATA_HOME/ansible"
export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"

#|-----------
#| Software
#|-----------

###| Utilities |###

#|-- fzf --
#| Installation:
#|   ❯ sudo dnf install fzf
#|   ❯ z4h update
#source <(fzf --zsh)

#|-- Zoxide --
#| Installation:
#|   ❯ curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
eval "$(zoxide init --cmd cd zsh)"

#|-- Navi --
#| Installation:
#|   ❯ BIN_DIR="$HOME/.local/bin" bash <(curl -sL https://raw.githubusercontent.com/denisidoro/navi/master/scripts/install)
eval "$(navi widget zsh)"

###| Dev tools |###

#|-- direnv --
#| Installation:
#|   ❯ bin_path="$HOME/.local/bin" bash <(curl -sfL https://direnv.net/install.sh)
# eval "$(direnv hook zsh)"
# export DIRENV_LOG_FORMAT=

#|-- mise --
#| Installation:
#|   ❯ curl https://mise.run | sh
#|   ❯ echo 'export PATH="$HOME/.local/share/mise/shims:$PATH"' >> ~/.zprofile
#|   ❯ mise settings set experimental true
eval "$(mise activate zsh)"

#|-- Taskfile --
#| Installation:
#|   ❯ sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin
#|   ❯ task --completion zsh > "$HOME/.local/share/zsh/completions/_task"

#|-- pyenv --
#| Installation:
#|   ❯ curl https://pyenv.run | bash
#|   ❯ sudo dnf install make gcc patch zlib-devel bzip2 bzip2-devel readline-devel sqlite \
#|     sqlite-devel openssl-devel tk-devel libffi-devel xz-devel libuuid-devel gdbm-libs libnsl2
export PYENV_ROOT="$HOME/.pyenv"
path+=($PYENV_ROOT/bin)
eval "$(pyenv init -)"
#eval "$(pyenv virtualenv-init -)"

#|-- uv --
#| Installation:
#|   ❯ curl -LsSf https://astral.sh/uv/install.sh | sh
#|   ❯ uv generate-shell-completion zsh > ~/.local/share/zsh/completions/_uv
#|   ❯ uvx --generate-shell-completion zsh > ~/.local/share/zsh/completions/_uvx

#|-- Poetry --
#| Installation:
#|   ❯ curl -sSL https://install.python-poetry.org | python3 -
#|   ❯ poetry config settings.virtualenvs.in-project true
#|   ❯ poetry config virtualenvs.prefer-active-python true
#|   ❯ poetry completions zsh > "$HOME/.local/share/zsh/completions/_poetry"

#|-- Volta --
#| Installation:
#|   ❯ curl -s "https://get.volta.sh" | bash -s -- --skip-setup
#export VOLTA_HOME="$HOME/.volta"
#path+=($VOLTA_HOME/bin)

#|---------------
#| Load plugins
#|---------------

z4h load olets/zsh-abbr
#z4h source Farid-NL/zsh-nvm/zsh-nvm.plugin.zsh
#z4h load   ohmyzsh/ohmyzsh/plugins/emoji-clock

#|-------------------
#| Plugins settings
#|-------------------

#|-- zsh-abbr --
ABBR_SET_EXPANSION_CURSOR=1

#|-- zsh-syntax-highlighting --
#| zsh-abbr:
(( ${#ABBR_REGULAR_USER_ABBREVIATIONS} )) && {
  typeset -A ZSH_HIGHLIGHT_REGEXP
  ZSH_HIGHLIGHT_HIGHLIGHTERS+=(regexp)
  ZSH_HIGHLIGHT_REGEXP+=('^[[:blank:][:space:]]*('${(j:|:)${(Qk)ABBR_REGULAR_USER_ABBREVIATIONS}}')$' fg=blue,bold,underline)
  ZSH_HIGHLIGHT_REGEXP+=('\<('${(j:|:)${(Qk)ABBR_GLOBAL_USER_ABBREVIATIONS}}')$' fg=blue,bold,underline)
}

#|------------------------------
#| Source files
#|------------------------------

z4h source ~/.config/zsh/functions.zsh
z4h source ~/.config/zsh/theme_opts.zsh

#|--------------
#| Extend PATH
#|--------------

path+=(~/.local/bin)
fpath=(~/.local/share/zsh/completions $fpath)

#|----------------------
#| Define key bindings
#|----------------------

z4h bindkey z4h-backward-kill-word  Ctrl+Backspace     Ctrl+H
z4h bindkey z4h-backward-kill-zword Ctrl+Alt+Backspace

z4h bindkey undo Ctrl+/ Shift+Tab  # undo the last command line change
z4h bindkey redo Alt+/             # redo the last undone command line change

z4h bindkey z4h-cd-back    Alt+Left   # cd into the previous directory
z4h bindkey z4h-cd-forward Alt+Right  # cd into the next directory
z4h bindkey z4h-cd-up      Alt+Up     # cd into the parent directory
z4h bindkey z4h-cd-down    Alt+Down   # cd into a child directory

#|---------------------
#| Autoload functions
#|---------------------

#autoload -Uz zmv

#|-----------------------------------
#| Define functions and completions
#|-----------------------------------

function md() { [[ $# == 1 ]] && mkdir -p -- "$1" && cd -- "$1" }
compdef _directories md

#|---------------------------
#| Define named directories
#|---------------------------
#| https://www.arp242.net/zshrc.html#directory-shortcuts

# ~w <=> Windows home directory on WSL.
#[[ -z $z4h_win_home ]] || hash -d w=$z4h_win_home

#|---------------------
#| Aliases
#|---------------------

alias ls='eza --group-directories-first --color=auto --icons=auto'
alias rm='rm -I'
alias egrep='egrep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'

# Add flags to existing aliases.
#alias ls="${aliases[ls]:-ls} --group-directories-first -v"

#|-----------------------------------
#| Set shell options
#|-----------------------------------
#| http://zsh.sourceforge.net/Doc/Release/Options.html

setopt glob_dots     # no special treatment for file names with a leading dot
#setopt no_auto_menu  # require an extra TAB press to open the completion menu
setopt auto_menu     # just one TAB press to open the completion menu

# Tmux on startup
#if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#  exec tmux new-session -A -s main
#fi
